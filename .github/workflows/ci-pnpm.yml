name: CI (pnpm)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 21]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: |
          # Type check shared packages
          pnpm --filter devtools-common typecheck
          pnpm --filter plugin-core typecheck  
          pnpm --filter shared-components typecheck
          pnpm --filter devtools-importer typecheck

      - name: Lint
        run: |
          # Lint shared packages
          pnpm --filter devtools-common lint
          pnpm --filter plugin-core lint
          pnpm --filter shared-components lint  
          pnpm --filter devtools-importer lint

      - name: Build shared packages
        run: |
          pnpm --filter devtools-common build
          pnpm --filter plugin-core build
          pnpm --filter shared-components build
          pnpm --filter devtools-importer build

      - name: Test shared packages
        run: |
          pnpm --filter devtools-common test || echo "No tests for devtools-common"
          pnpm --filter plugin-core test || echo "No tests for plugin-core"
          pnpm --filter shared-components test || echo "No tests for shared-components"

  build-plugins:
    name: Build & Test Plugins
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        plugin: [
          'accessibility-devtools',
          'api-mock-interceptor', 
          'auth-permissions-mock',
          'browser-automation-test-recorder',
          'bundle-impact-analyzer',
          'design-system-inspector',
          'error-boundary-visualizer',
          'feature-flag-manager',
          'form-state-inspector',
          'graphql-devtools',
          'i18n-devtools',
          'logger-devtools',
          'memory-performance-profiler',
          'render-waste-detector',
          'router-devtools',
          'security-audit-panel',
          'stress-testing-devtools',
          'visual-regression-monitor',
          'websocket-signalr-devtools',
          'zustand-devtools'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages first
        run: |
          pnpm --filter devtools-common build
          pnpm --filter plugin-core build
          pnpm --filter shared-components build
          pnpm --filter devtools-importer build

      - name: Type check plugin
        run: pnpm --filter ${{ matrix.plugin }} typecheck

      - name: Lint plugin
        run: pnpm --filter ${{ matrix.plugin }} lint

      - name: Build plugin
        run: pnpm --filter ${{ matrix.plugin }} build

      - name: Test plugin
        run: pnpm --filter ${{ matrix.plugin }} test || echo "No tests for ${{ matrix.plugin }}"

  build-matrix:
    name: Full Build Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: |
          pnpm --filter devtools-common build
          pnpm --filter plugin-core build
          pnpm --filter shared-components build
          pnpm --filter devtools-importer build

      - name: Build sample plugins
        run: |
          pnpm --filter api-mock-interceptor build
          pnpm --filter memory-performance-profiler build
          pnpm --filter browser-automation-test-recorder build

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: npx audit-ci --moderate