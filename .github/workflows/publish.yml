name: Publish

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., patch, minor, major, or specific version like 1.2.3)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor  
          - major
          - prerelease
      packages:
        description: 'Packages to publish (comma-separated, or "all")'
        required: true
        default: 'all'
        type: string
      bump_version:
        description: 'Bump version before publishing (only for manual dispatch)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.packages.outputs.packages }}
      version: ${{ steps.version.outputs.version }}
      should_bump: ${{ steps.version.outputs.should_bump }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine packages to publish
        id: packages
        run: |
          if [ "${{ github.event.inputs.packages }}" = "all" ] || [ -z "${{ github.event.inputs.packages }}" ]; then
            PACKAGES="devtools-common,plugin-core,shared-components,devtools-importer,feature-flags,logger,accessibility-devtools,api-mock-interceptor,auth-permissions-mock,browser-automation-test-recorder,bundle-impact-analyzer,design-system-inspector,error-boundary-visualizer,feature-flag-manager,form-state-inspector,graphql-devtools,i18n-devtools,logger-devtools,memory-performance-profiler,render-waste-detector,router-devtools,security-audit-panel,stress-testing-devtools,visual-regression-monitor,websocket-signalr-devtools,zustand-devtools"
          else
            PACKAGES="${{ github.event.inputs.packages }}"
          fi
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          echo "Publishing packages: $PACKAGES"

      - name: Determine version
        id: version  
        run: |
          # Check if triggered by a tag
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Extract version from tag (remove 'v' prefix)
            VERSION="${GITHUB_REF#refs/tags/v}"
            echo "should_bump=false" >> $GITHUB_OUTPUT
            echo "Using version from tag: $VERSION"
          # Check if triggered by a release
          elif [ "${{ github.event_name }}" = "release" ]; then
            # Extract version from release tag (remove 'v' prefix if present)
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
            echo "should_bump=false" >> $GITHUB_OUTPUT
            echo "Using version from release: $VERSION"
          # Manual workflow dispatch
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            # Check if bump_version is explicitly set
            if [ "${{ github.event.inputs.bump_version }}" = "true" ]; then
              echo "should_bump=true" >> $GITHUB_OUTPUT
              echo "Will bump version to: $VERSION"
            else
              echo "should_bump=false" >> $GITHUB_OUTPUT
              echo "Using existing version, expecting: $VERSION"
            fi
          else
            # Default case (shouldn't happen)
            VERSION="patch"
            echo "should_bump=true" >> $GITHUB_OUTPUT
            echo "Default version bump: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build all packages
        run: |
          # Build shared packages first
          pnpm --filter devtools-common build
          pnpm --filter plugin-core build
          pnpm --filter shared-components build
          pnpm --filter devtools-importer build
          
          # Build all plugins
          pnpm --filter "./plugins/*" build

      - name: Run tests
        continue-on-error: true
        run: |
          # Test shared packages
          pnpm --filter devtools-common test || echo "No tests for devtools-common"
          pnpm --filter plugin-core test || echo "No tests for plugin-core"  
          pnpm --filter shared-components test || echo "No tests for shared-components"

  publish-shared:
    name: Publish Shared Packages
    runs-on: ubuntu-latest
    needs: validate
    if: contains(needs.validate.outputs.packages, 'devtools-common') || contains(needs.validate.outputs.packages, 'plugin-core') || contains(needs.validate.outputs.packages, 'shared-components') || contains(needs.validate.outputs.packages, 'devtools-importer') || contains(needs.validate.outputs.packages, 'feature-flags') || contains(needs.validate.outputs.packages, 'logger')
    strategy:
      fail-fast: false
      matrix:
        package: [
          { name: 'devtools-common', path: 'packages/devtools-common' },
          { name: 'plugin-core', path: 'packages/plugin-core' },
          { name: 'shared-components', path: 'packages/shared-components' },
          { name: 'devtools-importer', path: 'packages/devtools-importer' },
          { name: 'feature-flags', path: 'packages/feature-flags' },
          { name: 'logger', path: 'packages/logger' }
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build dependencies
        run: |
          # Build in dependency order
          if [ "${{ matrix.package.name }}" != "devtools-common" ]; then
            pnpm --filter devtools-common build
          fi
          if [ "${{ matrix.package.name }}" != "devtools-common" ] && [ "${{ matrix.package.name }}" != "plugin-core" ]; then
            pnpm --filter plugin-core build
          fi
          if [ "${{ matrix.package.name }}" = "shared-components" ] || [ "${{ matrix.package.name }}" = "devtools-importer" ]; then
            pnpm --filter shared-components build
          fi

      - name: Build package
        run: pnpm --filter ${{ matrix.package.name }} build

      - name: Check if package should be published
        id: check
        run: |
          if [[ "${{ needs.validate.outputs.packages }}" == *"${{ matrix.package.name }}"* ]]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Version package
        if: steps.check.outputs.should_publish == 'true' && github.event.inputs.dry_run != 'true' && needs.validate.outputs.should_bump == 'true'
        working-directory: ${{ matrix.package.path }}
        run: |
          pnpm version ${{ needs.validate.outputs.version }} --no-git-tag-version

      - name: Publish package (Dry Run)
        if: steps.check.outputs.should_publish == 'true' && github.event.inputs.dry_run == 'true'
        working-directory: ${{ matrix.package.path }}
        run: pnpm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish package
        if: steps.check.outputs.should_publish == 'true' && github.event.inputs.dry_run != 'true'
        working-directory: ${{ matrix.package.path }}
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-plugins:
    name: Publish Plugin Packages  
    runs-on: ubuntu-latest
    needs: [validate, publish-shared]
    if: always() && (needs.publish-shared.result == 'success' || needs.publish-shared.result == 'skipped')
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        plugin: [
          'accessibility-devtools',
          'api-mock-interceptor',
          'auth-permissions-mock', 
          'browser-automation-test-recorder',
          'bundle-impact-analyzer',
          'design-system-inspector',
          'error-boundary-visualizer',
          'feature-flag-manager',
          'form-state-inspector',
          'graphql-devtools',
          'i18n-devtools',
          'logger-devtools',
          'memory-performance-profiler',
          'render-waste-detector',
          'router-devtools',
          'security-audit-panel',
          'stress-testing-devtools',
          'visual-regression-monitor',
          'websocket-signalr-devtools',
          'zustand-devtools'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages
        run: |
          pnpm --filter devtools-common build
          pnpm --filter plugin-core build
          pnpm --filter shared-components build
          pnpm --filter devtools-importer build

      - name: Build plugin
        run: pnpm --filter ${{ matrix.plugin }} build

      - name: Check if plugin should be published
        id: check
        run: |
          if [[ "${{ needs.validate.outputs.packages }}" == *"${{ matrix.plugin }}"* ]] || [[ "${{ needs.validate.outputs.packages }}" == "all" ]]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Version plugin
        if: steps.check.outputs.should_publish == 'true' && github.event.inputs.dry_run != 'true' && needs.validate.outputs.should_bump == 'true'
        working-directory: plugins/${{ matrix.plugin }}
        run: |
          pnpm version ${{ needs.validate.outputs.version }} --no-git-tag-version

      - name: Publish plugin (Dry Run)
        if: steps.check.outputs.should_publish == 'true' && github.event.inputs.dry_run == 'true'
        working-directory: plugins/${{ matrix.plugin }}
        run: pnpm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish plugin
        if: steps.check.outputs.should_publish == 'true' && github.event.inputs.dry_run != 'true'
        working-directory: plugins/${{ matrix.plugin }}
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: [publish-shared, publish-plugins]
    if: always()
    
    steps:
      - name: Report Publishing Status
        run: |
          echo "## Publishing Summary"
          echo "Shared Packages: ${{ needs.publish-shared.result }}"
          echo "Plugin Packages: ${{ needs.publish-plugins.result }}"
          
          if [[ "${{ needs.publish-shared.result }}" == "success" ]]; then
            echo "✅ Shared packages published successfully"
          else
            echo "⚠️ Some shared packages may have failed to publish"
          fi
          
          if [[ "${{ needs.publish-plugins.result }}" == "success" ]]; then
            echo "✅ All plugin packages published successfully"
          else
            echo "⚠️ Some plugin packages may have failed to publish - check individual job logs"
          fi

  commit-version-changes:
    name: Commit Version Changes
    runs-on: ubuntu-latest
    needs: [validate, publish-shared, publish-plugins]
    # Only commit if we actually bumped versions and published successfully
    if: always() && needs.validate.outputs.should_bump == 'true' && needs.publish-shared.result == 'success' && github.event.inputs.dry_run != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Update all package versions
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "Updating all packages to version $VERSION"
          
          # Update shared packages
          for pkg in devtools-common plugin-core shared-components devtools-importer feature-flags logger; do
            if [ -f "packages/$pkg/package.json" ]; then
              cd "packages/$pkg"
              npm version "$VERSION" --no-git-tag-version --allow-same-version
              cd ../..
            fi
          done
          
          # Update plugin packages
          for plugin in plugins/*/; do
            if [ -f "$plugin/package.json" ]; then
              cd "$plugin"
              npm version "$VERSION" --no-git-tag-version --allow-same-version
              cd ../..
            fi
          done

      - name: Commit and push changes
        run: |
          git add -A
          if ! git diff --staged --quiet; then
            git commit -m "chore: bump version to ${{ needs.validate.outputs.version }}"$'\n\n'"Automated version bump after npm publish"$'\n\n'"🤖 Generated by GitHub Actions"
            git push origin HEAD:main
          fi

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, publish-shared, publish-plugins, commit-version-changes]
    # Only create release for manual dispatch, not for tag/release triggers
    if: always() && needs.publish-shared.result == 'success' && github.event.inputs.dry_run != 'true' && github.event_name == 'workflow_dispatch' && (needs.commit-version-changes.result == 'success' || needs.commit-version-changes.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          echo "## Changes" > CHANGELOG.md
          git log --oneline --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md
          cat CHANGELOG.md

      - name: Get package version
        id: version
        run: |
          # Get version from one of the packages (they should all have the same version)
          VERSION=$(node -p "require('./packages/devtools-common/package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: v$VERSION"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, 'pre') }}